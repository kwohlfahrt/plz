#!/usr/bin/env zsh

set -e
set -u
set -o err_return
set -o pipefail
setopt extended_glob

cd ${0:a:h:h}

source ./test/utils.sh

function start_controller {
  info "Building the controller..."
  docker image build --quiet --tag=$CONTROLLER_IMAGE services/controller

  stop_container $CONTROLLER_CONTAINER

  info "Starting the controller..."
  docker_compose up --quiet-pull --detach
}

function stop_controller {
  docker_compose stop
  docker_compose logs
  docker_compose down --volumes
}

function build_cli {
  info "Building the CLI..."
  docker image build --quiet --target=builder --tag=$CLI_BUILDER_IMAGE --file=cli/Dockerfile .
  docker image build --quiet --tag=$CLI_IMAGE --file=cli/Dockerfile .
}

function run_controller_tests {
  stop_container $CONTROLLER_TESTS_CONTAINER
  docker image build --quiet --tag=$CONTROLLER_TESTS_IMAGE --file=$TEST_DIRECTORY/controller/Dockerfile .
  info Running controller tests
  docker run \
      --name $CONTROLLER_TESTS_CONTAINER \
      --network=$NETWORK \
      --env=PLZ_HOST=$PLZ_HOST \
      --env=PLZ_PORT=$PLZ_PORT \
      --env=PLZ_USER='plz-test' \
      --env=PLZ_PROJECT='controller-tests' \
      $CONTROLLER_TESTS_IMAGE
}

function cleanup {
  exit_status=$?
  stop_all_clis
  stop_controller
  stop_container $CONTROLLER_TESTS_CONTAINER
  remove_all_volumes
  return $exit_status
}

function stop_all_clis {
  for container in $(docker container ls --quiet --all --filter=name="${CLI_CONTAINER_PREFIX}"); do
    stop_container $container
  done
}

function stop_container {
  ! container_exists $1 && return
  docker container stop $1 > /dev/null || :
  docker container rm $1 > /dev/null || :
  info "$1 stopped."
}

function remove_all_volumes {
  for volume in $(docker volume ls --quiet --filter=name="${VOLUME_PREFIX}"); do
    remove_volume $volume
  done
}

function docker_compose {
  docker-compose \
  --project-name="$PROJECT_NAME" \
  --file="${TEST_DIRECTORY}/docker-compose.yml" \
  $@
}

function get_end_to_end_tests {
  if [[ $# -eq 0 ]]; then
    # Run all tests, except in directories named "*.ignored".
    end_to_end_tests=($((cd $TEST_DIRECTORY && echo -n end-to-end/*/*/plz.config.json~*/*.ignored/*) \
               | xargs -n1 dirname))
  else
    # Run selected tests.
    # But first, verify all arguments are actually test directories.
    for dir in $@; do
      if [[ ! ( $dir =~ '^[A-Za-z0-9\-]+/[A-Za-z0-9\-]+$' ) \
	     || ! -f "${TEST_DIRECTORY}/end-to-end/${dir}/plz.config.json" ]]; then
        echo "\"${dir}\" is not a test directory."
        exit 2
      fi
      end_to_end_tests=($@)
    done
  fi
}

# In "bless mode", instead of comparing the actual output against expected
# output, we save the output.
bless=false
# In "parallel mode", tests run in parallel.
parallel=false
# Whether to run all tests
all_tests=true
# Whether to run only end-to-end tests
end_to_end=false
# Whether to run only controller tests
controller=false
while [[ $# -gt 0 ]]; do
  case $1 in
    --bless)
      bless=true
      shift ;;
    --parallel)
      parallel=true
      shift ;;
    --end-to-end)
      all_tests=false
      end_to_end=true
      shift ;;
    --controller)
      all_tests=false
      controller=true
      shift ;;
    *)
      break
  esac
done

exit_early=false
trap 'exit_early=true; cleanup' EXIT INT TERM

mkdir -p $DATA_DIRECTORY
build_cli

if (( ${+PLZ_HOST} )) && (( ${+PLZ_PORT} )); then
  NETWORK=host
else
  start_controller
  PLZ_HOST=$CONTROLLER_CONTAINER
  PLZ_PORT=$CONTROLLER_PORT
fi
export PLZ_HOST
export PLZ_PORT
export NETWORK

success_file=$(mktemp "${DATA_DIRECTORY}/plz-test-success.XXXXX")
pids=()

function run_end_to_end_tests() {
  for test in $end_to_end_tests; do
    if $parallel; then
      (
        test_output=$("${TEST_DIRECTORY}/run-end-to-end-test" $test 2>&1) || rm -f $success_file
        echo $test_output
      ) &
      pids+=($!)
    else
      "${TEST_DIRECTORY}/run-end-to-end-test" $test || rm -f $success_file
      if $exit_early; then
        rm -f $success_file
        break
      fi
    fi
  done

  if $parallel; then
    for pid in $pids; do
      wait $pid
      if $exit_early; then
        rm -f $success_file
        break
      fi
    done
  fi
}

if $controller || $all_tests; then
  run_controller_tests || rm -f $success_file
fi

if $end_to_end || $all_tests; then
  get_end_to_end_tests
  run_end_to_end_tests
fi

echo
[[ -e $success_file ]]
