---
# Common packages
- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Add the Ansible APT repository
      apt_repository:
        repo: ppa:ansible/ansible
    - name: Update the APT repositories
      apt:
        update_cache: yes
    - name: Install aptitude
      apt:
        name: aptitude
    - name: Upgrade everything
      apt:
        upgrade: full
    - name: Install the fundamentals
      apt:
        name: '{{ item }}'
      with_items:
        - ansible
        - apt-transport-https
        - ca-certificates
        - curl
        - mosh
        - python-pip
    - name: Install awscli
      pip:
        name: awscli

# Build packages
- hosts: controller
  remote_user: root
  become: yes
  vars:
    packer_version: 1.1.3
    zip: /tmp/packer.zip
  tasks:
    - name: Install zsh
      apt:
        name: zsh
    - name: Install make
      apt:
        name: make
    - name: Install unzip
      apt:
        name: unzip
    - name: Create plz-user user
      user:
        name: plz-user
        create_home: no
        home: /cache/plz-user-home
        shell: /bin/false
    - name: Add plz-user to sshd configuration
      blockinfile:
        block: |
          Match User plz-user
          X11Forwarding no
          AllowAgentForwarding no
          PermitOpen 0.0.0.0:80
          ForceCommand echo 'This account can only be used for ssh channels to port 80'
        dest: /etc/ssh/sshd_config
    - name: Put sshd user in the cache group
      user:
        name: sshd
        groups: cache
        append: yes
    - name: Restart sshd
      service:
        name: sshd
        state: restarted
    - name: Check whether Packer is present
      stat: path=/etc/shorewall/rules
      register: packer
    - name: Download Packer
      get_url:
        url: "https://releases.hashicorp.com/packer/{{ packer_version }}/packer_{{ packer_version }}_linux_amd64.zip"
        dest: "{{ zip }}"
      when: not packer.stat.exists
    - name: Install Packer
      unarchive:
        src: "{{ zip }}"
        dest: /usr/local/bin
        remote_src: yes
      when: not packer.stat.exists

- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Create the Docker service configuration directory
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
    - name: Configure the Docker daemon to open itself over TCP
      copy:
        dest: /etc/systemd/system/docker.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/dockerd -H fd:// -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375
    - name: Grab the Docker GPG keys
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    - name: Add the Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable

- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Update the APT repositories
      apt:
        update_cache: yes
    - name: Install Docker
      apt:
        name: docker-ce
    - name: Install docker for Python
      pip:
        name: docker
    - name: Install docker-compose for Python
      pip:
        name: docker-compose
    - name: Add the user to the docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

- hosts: worker
  remote_user: root
  become: yes
  tasks:
    - name: Grab the NVIDIA-Docker GPG keys
      shell: |
        curl -fsSL https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add -
    - name: Add the NVIDIA-Docker APT repository
      shell: curl -fsSL https://nvidia.github.io/nvidia-docker/ubuntu16.04/nvidia-docker.list > /etc/apt/sources.list.d/nvidia-docker.list
    - name: Update the APT repositories
      apt:
        update_cache: yes
    - name: Install NVIDIA-Docker
      apt:
        name: nvidia-docker2
    - name: Download cuda driver
      get_url:
        url: http://us.download.nvidia.com/XFree86/Linux-x86_64/390.48/NVIDIA-Linux-x86_64-390.48.run
        checksum: "sha256:2c01f57abd78e9c52d3e76e3cdf688835be54f419a1093bbaa7ab21f375d4399"
        dest: /nvidia_driver.sh
    - name: Set the nvidia driver to be executable
      file:
        path: /nvidia_driver.sh
        owner: root
        group: root
        mode: 0700
    - name: Install nvidia driver
      shell: /nvidia_driver.sh -s
    - name: Delete nvidia driver installer
      file:
        path: /nvidia_driver.sh
        state: absent
