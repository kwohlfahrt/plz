---
- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Update the APT repositories
      apt:
        update_cache: yes
    - name: Upgrade everything
      apt:
        upgrade: full
    - name: Install apt-transport-https
      apt:
        name: apt-transport-https
    - name: Install ca-certificates
      apt:
        name: ca-certificates
    - name: Install curl
      apt:
        name: curl
    - name: Install mosh
      apt:
        name: mosh

- hosts: build
  remote_user: root
  become: yes
  vars:
    packer_version: 1.1.3
    zip: /tmp/packer.zip
  tasks:
    - name: Install make
      apt:
        name: make
    - name: Check whether Packer is present
      stat: path=/etc/shorewall/rules
      register: packer
    - name: Download Packer
      get_url:
        url: "https://releases.hashicorp.com/packer/{{ packer_version }}/packer_{{ packer_version }}_linux_amd64.zip"
        dest: "{{ zip }}"
      when: not packer.stat.exists
    - name: Install Packer
      unarchive:
        src: "{{ zip }}"
        dest: /usr/local/bin
        remote_src: yes

- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Grab the Docker GPG keys
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    - name: Add the Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    - name: Install Docker
      apt:
        name: docker-ce
        update_cache: yes

- hosts: experiments
  remote_user: root
  become: yes
  tasks:
    - name: Grab the NVIDIA-Docker GPG keys
      shell: |
        curl -fsSL https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add -
    - name: Add the NVIDIA-Docker APT repository
      shell: curl -fsSL https://nvidia.github.io/nvidia-docker/ubuntu16.04/amd64/nvidia-docker.list > /etc/apt/sources.list.d/nvidia-docker.list
    - name: Install NVIDIA-Docker
      apt:
        name: nvidia-docker2
        update_cache: yes

- hosts: build
  vars:
    volume: /dev/xvdx
    fstype: ext4
  remote_user: root
  become: yes
  tasks:
    - name: Create a filesystem on the build cache volume
      filesystem:
        dev: "{{ volume }}"
        fstype: "{{ fstype }}"
    - name: Mount the build cache volume
      mount:
        src: "{{ volume }}"
        path: /cache
        fstype: "{{ fstype }}"
        state: mounted

- hosts: all
  remote_user: root
  become: yes
  tasks:
    - name: Reboot server
      shell: sleep 1 && /sbin/reboot &
      async: 0
      poll: 0
      args:
        removes: /var/run/reboot-required
    - name: Wait for the server to finish rebooting
      local_action: wait_for host={{ inventory_hostname }} port=22 timeout=300
      become: no
